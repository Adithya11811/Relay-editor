// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum VoteType {
  UP
  DOWN
}

enum ProjectType {
  python
  javascript
  typescript
  cpp
  c
  java
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @default(now())
  accounts              Account[]
}

model Account {
  id                String          @id @default(cuid())
  userId            String          @unique
  username          String          @default("")
  linkedinLink      String?         @default("")
  githubLink        String?         @default("")
  profileImage      String?         @default("")
  banner            String?         @default("")
  refresh_token     String?         @db.Text
  access_token      String?         @db.Text
  expires_at        DateTime?
  friends           String[]
  follow            String[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
  projects          Project[] // Adjust the relationship
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitation        Invitation[]
  collaborators     Collaborators[]
  Post              Post[]
  Comment           Comment[]
  CommentVote       CommentVote[]
  subscriptions     Subscription[]
  votes             Vote[]
  createdSubreddits Subreddit[]     @relation("CreatedBy")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  projectId          String      @id @default(uuid())
  projectName        String
  projectDescription String
  projectType        ProjectType
  created_at         DateTime    @default(now())
  updated_at         DateTime    @default(now())
  creator            String // Adjust the field
  account            Account     @relation(fields: [creator], references: [id], onDelete: Cascade)
  files              Files[]
}

model Files {
  id         String   @id @default(uuid())
  name       String
  belongs_to String
  fileUrl    String
  project    Project  @relation(references: [projectId], fields: [belongs_to], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Invitation {
  id          String   @id @default(uuid())
  senderId    String // ID of the user sending the invitation
  recipientId String // Email address of the recipient user
  projectId   String
  status      String // Status of the invitation (e.g., pending, accepted, rejected)
  createdAt   DateTime @default(now()) // Timestamp for when the invitation was created
  updatedAt   DateTime @updatedAt // Timestamp for when the invitation was last updated

  // Define a relationship between Invitation and User models
  sender Account @relation(fields: [senderId], references: [id])
}

model Collaborators {
  id            String  @id @default(uuid())
  projectId     String
  collaborators String
  collaborator  Account @relation(fields: [collaborators], references: [id], onDelete: Cascade)

  @@unique([projectId, collaborators])
}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String? // Adjusted to match the data type of Account's id
  creator     Account?       @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        Account   @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      Account   @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    Account  @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user   Account  @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      Account  @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}
