// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectType {
  python
  javascript
  typescript
  cpp
  c
  java
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @default(now())
  accounts              Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  username          String  @default("")
  linkedinLink      String? @default("")
  githubLink        String? @default("")
  profileImage      String? @default("")
  banner            String? @default("")
  type              String
  provider          String
  providerAccountId String @default(uuid())
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  projects          Project[]               // Adjust the relationship
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
@@unique([provider,providerAccountId])
invitation Invitation[]
collaborators Collaborators[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  projectId           String       @id @default(uuid())
  projectName         String
  projectDescription  String
  projectType         ProjectType
  created_at          DateTime     @default(now())
  updated_at          DateTime     @default(now())
  creator             String       // Adjust the field
  account             Account      @relation(fields: [creator], references: [id], onDelete: Cascade)
  files     Files[]
}


model Files{
  id String @id @default(uuid())
  name String
  belongs_to String
  fileUrl String
  project Project @relation(references: [projectId], fields: [belongs_to],onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Invitation {
  id        String   @id @default(uuid())
  senderId  String      // ID of the user sending the invitation
  recipientId String  // Email address of the recipient user
  projectId String
  status    String   // Status of the invitation (e.g., pending, accepted, rejected)
  createdAt DateTime @default(now()) // Timestamp for when the invitation was created
  updatedAt DateTime @updatedAt   // Timestamp for when the invitation was last updated
  
  // Define a relationship between Invitation and User models
  sender  Account    @relation(fields: [senderId], references: [id])
}

model Collaborators{
  id String @id @default(uuid())
  projectId String
  collaborators String
  collaborator Account @relation(fields: [collaborators],references: [id])
}