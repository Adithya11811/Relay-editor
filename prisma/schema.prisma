// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}
enum ProjectType {
  python
  javascript
  cpp
  c
  java  
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account?

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  username          String  @default("")
  linkedinLink      String? @default("")
  githubLink        String? @default("")
  profileImage      String? @default("")
  banner            String? @default("")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Project{
  id String @id @default(cuid())
  name String  
  description String?
  project_type ProjectType 
  creator String 
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  directory Directory[]
  projectenv ProjectEnv[]
  account Account @relation(fields:[creator],references: [id],onDelete: Cascade)
}

enum FileType {
  file
  directory
}
model Directory{
  id String @id @default(cuid())
  name String 
  projectId String
  parent String @unique

  file_type FileType @default(directory)
  created_at DateTime @default(now())
  last_modified DateTime @default(now())


  directory Directory[] @relation("parentdir")
  parentDir Directory @relation("parentdir",fields: [parent],references: [parent],onDelete: Cascade)
  project Project @relation(fields:[projectId], references: [id], onDelete: Cascade)
}

model ProjectEnv{
  id String @id @default(cuid())
  key String 
  value String
  projectId String

  project Project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  created_at DateTime @default(now())
}